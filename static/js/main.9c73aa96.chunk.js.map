{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","_this$props","this","props","id","name","email","react_default","a","createElement","className","alt","src","concat","Component","CardList","robots","map","robot","i","components_Card","key","SearchBox","type","placeholder","onChange","searchCriteria","Scroll","style","overflow","border","height","children","ErrorBoundary","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","App","onRobotsRequest","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","fontSize","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobotsReducer","requestRobotsReducer","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c73aa96.chunk.js","sourcesContent":["\timport React, {Component} from 'react';\r\n\r\n\tclass Card extends Component{\r\n\t\trender(){\r\n\t\t\t/*here props is a single robot object*/\r\n\t\t\tconst {id,name,email}=this.props;\r\n\t\t\treturn(\r\n\t\t\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t\t<img alt=\"robo\" src={`https://robohash.org/${id}?200*200`} />\r\n\t<div>\r\n\t<h1>{name}</h1>\r\n\t<p>{email}</p>\r\n\t</div>\r\n\t</div>\r\n\t\t\t\t)\r\n\t\t};\r\n\t}\r\n\texport default Card;","import React, {Component} from 'react';\r\nimport Card from './Card';\r\n\r\n\tclass CardList extends Component{\r\n\t\trender(){\r\n\t\t\t/*here props is an array of robots*/\r\n\t\t\tconst {robots}=this.props;\r\n\t\t\treturn(\r\n\t\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\trobots.map((robot,i)=>{\r\n\t\t\t\t\t\treturn ( <Card key={robot.id} \r\n\t\t\t\t\t\t\tid={robot.id} \r\n\t\t\t\t\t\t\tname={robot.name} \r\n\t\t\t\t\t\t\temail={robot.email} />\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t)\r\n\r\n\t\t\t};\r\n\t\t}\r\nexport default CardList;","import React, { Component } from 'react';\r\n\r\nclass SearchBox extends Component {\r\n  render() {\r\n    return(\r\n    \t<div className=\"pa2\">\r\n<input className=\" f3 pa2 ma4 ba b--green bg-lightest-blue shadow-3 w-20 h3\" type=\"search\" placeholder=\"Enter a name here...\" \r\nonChange={this.props.searchCriteria}/>\r\n</div>\r\n    \t)}\r\n}\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass Scroll extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\r\n<div style={\r\n\t{overflow:'scroll', border:'5px solid #5C5393', height:'800px'}\r\n}>\r\n{this.props.children}\r\n</div>\r\n\r\n\t\t\t)\r\n\t}\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n       super();\r\n       this.state ={\r\n       \thasError : false\r\n       }\r\n\t}\r\n\tcomponentDidCatch(error,info){\r\n       this.setState({hasError:true});\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>OOPS!Something went wrong</h1>\r\n\t\t}else{\r\n\t\t\treturn (this.props.children);\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField,requestRobots } from '../actions';\r\n\r\nconst mapStateToProps =(state)=>{\r\n  return {\r\n    searchField: state.searchRobotsReducer.searchField, //getting value from reducer function\r\n    isPending: state.requestRobotsReducer.isPending,\r\n    robots: state.requestRobotsReducer.robots,\r\n    error: state.requestRobotsReducer.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch)=>{\r\n  return{\r\n    onSearchChange: (event)=>dispatch(setSearchField(event.target.value)),\r\n    onRobotsRequest: ()=>dispatch(requestRobots())\r\n  }\r\n}\r\nclass App extends Component {\r\n\r\n /* constructor(){\r\n    super();\r\n    this.state={\r\n      robots : [],\r\n     // searchField: ''\r\n    }\r\n  } */\r\n\r\n  componentDidMount(){\r\n    this.props.onRobotsRequest();\r\n   /* fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=>response.json())\r\n    .then(users=>this.setState({robots:users})\r\n    ); */\r\n  }\r\n\r\n /* componentDidMount(){\r\nconst usersAsync= async function(){\r\n  try{\r\nconst users= await fetch('https://jsonplaceholder.typicode.com/users');\r\nconst usersPromise= await users.json();\r\nconsole.log(usersPromise);\r\nconst a= await this.setState({robots:usersPromise});\r\n\r\n}\r\ncatch(e){\r\n  console.log(\"Oops encountered an error!\",e);\r\n}\r\n}\r\nconsole.log(usersAsync());\r\n}*/\r\n\r\n /* onSearchChange = (event)=>\r\n  {\r\n    // for setting searchField value set through setState only\r\nthis.setState({\r\n  searchField : event.target.value\r\n})\r\n}*/\r\n\r\nrender() {\r\n    //const {robots}= this.state;\r\n    const {searchField, onSearchChange, robots, isPending}=this.props;\r\n    const filteredRobots=robots.filter(robot=>\r\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n      )\r\n    //return(!robots.length)?\r\n    return isPending ?\r\n    <h1>Loading....</h1> :\r\n    (\r\n    <div className=\"tc\">\r\n    <h1 className=\"font-effect-neon\" style={{fontSize:'3em'}}>ROBO FRIENDS</h1>\r\n    <SearchBox searchCriteria={onSearchChange} />\r\n    <Scroll>\r\n    <ErrorBoundary>\r\n    <CardList robots={filteredRobots} />\r\n    </ErrorBoundary>\r\n    </Scroll>\r\n    </div>\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILURE} from './constants.js';\r\n\r\nexport const setSearchField=(text)=>{\r\n\treturn{\r\n       type: CHANGE_SEARCH_FIELD,\r\n       payload: text\r\n      };\r\n  }\r\n\r\nexport const requestRobots = () =>(dispatch)=>{\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=>response.json())\r\n    .then(data=>dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error=> dispatch({type: REQUEST_ROBOTS_FAILURE, payload: error}));      \r\n}","//To keep track of all actions in Redux\r\nexport const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\n\r\n//For robots array \r\nexport const REQUEST_ROBOTS_PENDING= 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS= 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILURE= 'REQUEST_ROBOTS_FAILURE';","import {CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILURE} from './constants.js';\r\n\r\n\tconst initialStateSearch={\r\n\t\tsearchField: ''\r\n\t}\r\n\r\n\tconst initialStateRobots={\r\n\t\tisPending: false,\r\n\t\trobots: [],\r\n\t\terror: ''\r\n\t}\r\n\r\n\r\n\texport const searchRobotsReducer=(state=initialStateSearch, action={})=>{\r\n\t\tswitch(action.type){\r\n\t\t\tcase CHANGE_SEARCH_FIELD:\r\n\t           //return Object.assign({},state,{searchField:action.payload});\r\n\t           return {...state, searchField:action.payload};\r\n\t        default:\r\n\t           return state;\r\n        }\r\n    }\r\n\r\nexport const requestRobotsReducer=(state=initialStateRobots, action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\treturn Object.assign({},state,{isPending: true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\treturn Object.assign({},state,{isPending: false, robots:action.payload});\r\n\t\tcase REQUEST_ROBOTS_FAILURE:\r\n\t\treturn Object.assign({},state,{isPending:false, error:action.payload});\r\n\t\tdefault:\r\n\t\treturn state;\r\n\t}\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport { Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {searchRobotsReducer, requestRobotsReducer} from './reducers';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst rootReducer= combineReducers({searchRobotsReducer, requestRobotsReducer});\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n<Provider store={store}>\n<App />\n</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}